package cfg

import (
	"encoding/json"
	"flag"
	"github.com/acharapko/pbench/idservice"
	"os"

	"github.com/acharapko/pbench/log"
)

var configFile = flag.String("config", "config.json", "Configuration file for replica. Defaults to config.json.")


// Bconfig holds all benchmark configuration
type Bconfig struct {
	T                    int     // total number of running time in seconds
	N                    int     // total number of requests
	K                    int     // key sapce
	W                    float64 // write ratio
	Throttle             int     // requests per second throttle, unused if 0
	Concurrency          int     // number of simulated clients
	Distribution         string  // distribution
	LinearizabilityCheck bool    // run linearizability checker at the end of benchmark
	OpenLoopWorker       bool    // whether the workers are open-loop
	MaxOutstanding       int     // number of outstanding operations per OpenLoopWorker
	OpenLoopThrottle     int     // interval between commands in open loop client

	// conflict distribution
	Conflicts int // percentage of conflicting keys
	Min       int // min key

	// normal distribution
	Mu    float64 // mu of normal distribution
	Sigma float64 // sigma of normal distribution
	Move  bool    // moving average (mu) of normal distribution
	Speed int     // moving speed in milliseconds intervals per key

	// zipfian distribution
	ZipfianS float64 // zipfian s parameter
	ZipfianV float64 // zipfian v parameter

	// exponential distribution
	Lambda float64 // rate parameter

	Size int // payload size
}

// DefaultBConfig returns a default benchmark config
func DefaultBConfig() Bconfig {
	return Bconfig{
		T:                    60,
		N:                    0,
		K:                    1000,
		W:                    0.5,
		Throttle:             0,
		Concurrency:          1,
		Distribution:         "uniform",
		LinearizabilityCheck: true,
		Conflicts:            100,
		Min:                  0,
		Mu:                   0,
		Sigma:                60,
		Move:                 false,
		Speed:                500,
		ZipfianS:             2,
		ZipfianV:             1,
		Lambda:               0.01,
		Size:				  8,
		OpenLoopWorker:       false,
		MaxOutstanding:       10,
		OpenLoopThrottle:     1,
	}
}

// Config contains every system configuration
type Config struct {
	Addrs     		map[idservice.ID]string // address for node communication
	AddrsStr   		map[string]string        `json:"address"`      // address for node communication
	HTTPAddrs 		map[idservice.ID]string // address for client server communication
	HTTPAddrsStr	map[string]string        `json:"http_address"` // address for client server communication

	UseRetroLog		bool 	 `json:"use_retro_log"`

	Policy    		string  `json:"policy"`    // leader change policy {consecutive, majority}
	Threshold 		float64 `json:"threshold"` // threshold for policy in WPaxos {N consecutive or time interval in ms}

	Thrifty        bool         `json:"thrifty"`          // only send messages to a quorum
	BufferSize     int          `json:"buffer_size"`      // buffer size for maps
	ChanBufferSize int          `json:"chan_buffer_size"` // buffer size for channels
	MultiVersion   bool         `json:"multiversion"`     // create multi-version database
	Benchmark      Bconfig 	`json:"benchmark"`        // benchmark configuration

	// for future implementation
	// Batching bool `json:"batching"`
	// Consistency string `json:"consistency"`
	// Codec string `json:"codec"` // codec for message serialization between nodes

	N   int         // total number of nodes
	Z   int         // total number of zones
	Npz map[int]int // nodes per zone
}

// Config is global configuration singleton generated by init() func below
var config *Config

func init() {
	config = MakeDefaultConfig()
}

// GetConfig returns global configuration
func GetConfig() *Config {
	return config
}

// MakeDefaultConfig returns Config object with few default values
// only used by init() and master
func MakeDefaultConfig() *Config {
	return &Config{
		Addrs:          make(map[idservice.ID]string),
		HTTPAddrs:      make(map[idservice.ID]string),
		Policy:         "consecutive",
		Threshold:      3,
		BufferSize:     1024,
		ChanBufferSize: 1024,
		MultiVersion:   false,
		UseRetroLog:    false,
		Benchmark:      DefaultBConfig(),
	}
}

// IDs returns all node ids
func (c *Config) IDs() []idservice.ID {
	ids := make([]idservice.ID, 0)
	for id := range c.Addrs {
		ids = append(ids, id)
	}
	return ids
}

// String is implemented to print the config
func (c *Config) String() string {
	config, err := json.Marshal(c)
	if err != nil {
		log.Error(err)
		return ""
	}
	return string(config)
}

// Load loads configuration from config file in JSON format
func (c *Config) Load() {
	file, err := os.Open(*configFile)
	if err != nil {
		log.Fatal(err)
	}
	decoder := json.NewDecoder(file)
	err = decoder.Decode(c)
	if err != nil {
		log.Fatal(err)
	}

	c.Addrs = make(map[idservice.ID]string, len(c.AddrsStr))
	for idStr, ip := range c.AddrsStr {
		c.Addrs[idservice.NewIDFromString(idStr)] = ip
	}

	c.HTTPAddrs = make(map[idservice.ID]string, len(c.HTTPAddrsStr))
	for idStr, httpaddress := range c.HTTPAddrsStr {
		c.HTTPAddrs[idservice.NewIDFromString(idStr)] = httpaddress
	}

	c.Npz = make(map[int]int)
	for id := range c.Addrs {
		c.N++
		c.Npz[id.Zone()]++
	}
	c.Z = len(c.Npz)
}

// Save saves configuration to file in JSON format
func (c *Config) Save() error {
	file, err := os.Create(*configFile)
	if err != nil {
		return err
	}
	encoder := json.NewEncoder(file)
	return encoder.Encode(c)
}
